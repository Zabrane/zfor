#!/usr/bin/env escript
-define(REL_FILE, "./src/zfor.rel.in").

main(_) ->
	{ok, Fd} = file:open(?REL_FILE, [write]),
	io:format(Fd, "% Release file for generating boot script
{release,
    {\"zfor\", \"%VSN%\"},
    {erts, \"~s\"},
    [
", [erlang:system_info('version')]),
	output_lib_version(Fd, [kernel, stdlib, sasl, crypto, inets, {zfor, "%VSN%"}], "        "),
	io:format(Fd, "
    ]
}.
% vim:ft=erlang ts=4 sw=4
", []),
	ok = file:close(Fd),
	io:format("~s generated!\n", [?REL_FILE]).


output_lib_version(_, [], _) -> 'ok';
output_lib_version(Fd, [Lib], PrefixStr) when is_atom(Lib) ->
	VerStr = lib_verstr(Lib),
	io:format(Fd, "~s{~s, \"~s\"}\n", [PrefixStr, Lib, VerStr]);
output_lib_version(Fd, [{Lib, VerStr}], PrefixStr) when is_atom(Lib), is_list(VerStr) ->
	io:format(Fd, "~s{~s, \"~s\"}\n", [PrefixStr, Lib, VerStr]);
output_lib_version(Fd, [{Lib, VerStr} | Rest], PrefixStr) when is_atom(Lib), is_list(VerStr) ->
	io:format(Fd, "~s{~s, \"~s\"},\n", [PrefixStr, Lib, VerStr]),
	output_lib_version(Fd, Rest, PrefixStr);
output_lib_version(Fd, [Lib | Rest], PrefixStr) when is_atom(Lib) ->
	VerStr = lib_verstr(Lib),
	io:format(Fd, "~s{~s, \"~s\"},\n", [PrefixStr, Lib, VerStr]),
	output_lib_version(Fd, Rest, PrefixStr).

lib_verstr(Lib) when is_atom(Lib) ->
	LibDir = code:lib_dir(Lib),
	string:substr(LibDir, string:rchr(LibDir, $-) + 1).

% vi:ft=erlang ts=4 sw=4

