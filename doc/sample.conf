% Comments are started with percent(%) character (as in Erlang)

% ZFOR configurations are described by several Erlang tuples in two formats:
% 	a. Global configuration
% 	b. Virtual host configuration

% Global configs are tuples tagged with atom 'global'. The abstract syntax
% can be represented as following:
% 	{'global', [{Option, Value}]}.
% Option is the global param name represented with atom, and Value is the
% corresponding value. The param pair is placed in a list, so there can be
% more than one param pairs specified in a global config tuple.

% Virtual host configs are tuples tagged with atom 'vhost'. The abstract
% syntax can be represented as following:
% 	{'vhost', VHostName, [{Option, Value}]}.
% VHostName is the virtual hostname string; Option is the virtual host config
% param name represented with atom, and Value is the corresponding value.
% There can be also more than one param pairs specified in a virtual host
% config tuple.

% All files ended with suffix ".conf" in the ZFOR config directory are
% recursively read as ZFOR configurations. Also, the system-wide DNS config
% file "/etc/resolv.conf" will be checked by Erlang RTS automatically,
% which will extract the nameservers out.

% Parsing errors will be logged while loading config files, and the bad-
% formatted ones will be skipped.

% Global and virtual host config tuples can each present several times in
% random order. ZFOR will merge them separately based on global and unique
% virtual host rule. For example, if we have the following 2 config files:
% 	> file1.conf
% 	{'global',
% 		[
% 			{K1, V1},
% 			{K2, V2}
% 		]
% 	}.
% 	{'vhost', "v1.host.com",
% 		[
% 			{K3, V3}
% 		]
% 	}.
%
% 	> file2.conf
% 	{'global',
% 		[
% 			{K1, Vx},
% 			{K4, V4}
% 		]
% 	}.
% 	{'vhost', "v1.host.com",
% 		[
% 			{K3, Vy},
% 			{K4, Vz}
% 		]
% 	}.
% 	{'vhost', "v2.host.com",
% 		[
% 			{K5, V5}
% 		]
% 	}.
%
% After ZFOR loading and merging them, the final config data can be presented as:
% 	global -> [{K1, Vx}, {K2, V2}, {K4, V4}]
% 	vhost:"v1.host.com" -> [{K3, Vy}, {K4, Vz}]
% 	vhost:"v2.host.com" -> [{K5, V5}]
% The new value of the same param can either overwrite or append to the old ones.
% Which strategy is actually taken depends on the parameter. The overwriting or
% appending sequences depend on the config filename, directory location and Erlang
% OTP version. So try not to specify the values of the same param in two different
% config files.

% This is a sample of global configuration:
{'global', 	% The tag and param name are Erlang atoms, so they could be OPTIONALLY
			% single-quoted. The following content will ignore the single quotes
			% to save some typings :)
	[
		% 'config_url' gives the remote config file URL, HTTP scheme only for now.
		% The given remote URL(s) will be checked periodly and reloaded when
		% necessary.
		% - Value type: string()
		% - Merging rule: SET, which means every specified values will be uniqued
		% and the remains are taken as the final param value.
		{config_url, "http://192.168.1.2/vhosts.conf"},

		% 'config_ttl' specifies the caching expire time of config data. The config
		% files will be checked after this long and reloaded when necessary.
		% - Value type: integer(), in milliseconds.
		% - Merging rule: SCALAR, which means the new value overwrites the old one
		% and the last one is taken as the final param value.
		{config_ttl, 1000},

		% 'resolve_timeout' specifies the DNS resolving timeout. The health checking
		% process will be terminated after DNS resolving timeout, and the host will
		% be marked as dead.
		% - Value type: integer(), in milliseconds.
		% - Merging rule: SCALAR, which means the new value overwrites the old one
		% and the last one is taken as the final param value.
		{resolve_timeut, 1500},

		% 'server_port' specifies the ZFOR server listening port (UDP).
		% - Value type: integer().
		% - Merging rule: SCALAR, which means the new value overwrites the old one
		% and the last one is taken as the final param value.
		{server_port, 1117}
	]
}. 	% NOTE: DO NOT forget the trailing dot!!

% This is a sample virtual host configuration
{vhost,
	"balance.zfor.my.domain", 	% This is the virtual host name
	[
		% 'host' specifies the hosts (either physical or ZFOR virtual host) under
		% current virtual host.
		% - Value type: [string()], each string is a hostname.
		% - Merging rule: SET, which means every specified values will be uniqued
		% and the remains are taken as the final param value.
		{host, [
			"192.168.1.1",
			"192.168.1.2",
			"192.168.1.3",
			"192.168.1.4"
			]
		},

		% 'select_method' specifies the host selection method under a virtual
		% host.
		% - Value type: atom(), the available methods are:
		% 	* 'fallback' - Select the first alive host in the list.
		% 	* 'grp_rand' - Randomly select a host in the alive group.
		% 	* 'grp_all' - Select all hosts in the alive group.
		% 	* 'min_rt' - Select the fastest response alive host.
		% 	* 'single_active' - Select the host when it's the only alive one,
		% 						otherwise the resolving is failed.
		% 	* 'all_active' - Select all alive hosts.
		% - Merging rule: SCALAR, which means the new value overwrites the old one
		% and the last one is taken as the final param value.
		{select_method, grp_rand},

		% 'check_ttl' specifies the caching expire time for hosts health status.
		% The hosts under the current virtual host will be checked after this long.
		% - Value type: integer(), in milliseconds.
		% - Merging rule: SCALAR, which means the new value overwrites the old one
		% and the last one is taken as the final param value.
		{check_ttl, 1000},

		% 'check_type' specifies the 
